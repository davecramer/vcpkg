# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-11-arm

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Get Winflexbison
        run: |
          curl -L -o winflexbison.zip "https://github.com/lexxmark/winflexbison/releases/download/v2.5.25/win_flex_bison-2.5.25.zip"
          mkdir winflexbison
          cd winflexbison
          unzip ../winflexbison.zip
          mkdir /builddeps
          cp -r * /builddeps
          echo "/builddeps" >> $ENV:GITHUB_PATH
          dir /builddeps
      

      - uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: "5.40"
          distribution: strawberry
      
      # Runs a single command using the runners shell
      - name: Setup msvc
        uses:  ilammy/msvc-dev-cmd@v1
        with:
          arch: arm64
          toolset: 14.43
          vsversion: 2022
      
      - name: Install Packages
        run: | 
          vcpkg.exe install --triplet=arm64-windows `
          libxml2 `
          lz4 `
          pkgconf `
          zlib `
          --debug

      - name: Checkout PostgreSQL
        uses: actions/checkout@v4
        with:
            repository: postgres/postgres
            path: postgresql-master
            ref: master

      - name: add vcpkg path
        run: |
          echo "c:/vcpkg/installed/arm64-windows/bin" >> $ENV:GITHUB_PATH
          vcpkg integrate install

      - name: Patch Postgres for arm
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "<>"
          cd postgresql-master
          git am ..\0001-patch-for-arm.patch

      - name: Setup Python
        uses: actions/setup-python@v1

      - name: install Meson
        run: python.exe -m pip install meson==1.8.2

      - name: Configure
        run: |
          $pathString = "c:\vcpkg\installed\arm64-windows\bin"
          $currentPath = [Environment]::GetEnvironmentVariable("Path", "User")
          [Environment]::SetEnvironmentVariable("Path", "$pathString;$currentPath", "User")
          .\setenvarm.ps1
          cd postgresql-master
          meson.exe setup build `
              --prefix=C:\postgresql `
              --buildtype=debugoptimized `
              -Dlibxslt=disabled `
              -Dlibxml=disabled `
              -Dextra_lib_dirs="c:\vcpkg\installed\arm64-windows\lib" `
              -Dextra_include_dirs="c:\vcpkg\installed\arm64-windows\include" `
              -Dpkg_config_path="c:\vcpkg\installed\arm64-windows\lib\pkgconfig"
          
      - name: Build
        run: |
          $pathString = "c:\vcpkg\installed\arm64-windows\bin"
          $currentPath = [Environment]::GetEnvironmentVariable("Path", "User")
          [Environment]::SetEnvironmentVariable("Path", "$pathString;$currentPath", "User")
          .\setenvarm.ps1
          cd postgresql-master\build
          ninja -j 1 

      - name: Upload Meson Log
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: postgresql-master-meson-log
          path: postgresql-master\build\meson-logs\meson-log.txt
        if: always()
